AWSTemplateFormatVersion: '2010-09-09'
Description: ACM-PCA template
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Common parameters
      Parameters:
      - NotificationTopic
      - TimeoutInMinutes
    - Label:
        default: Route53 parameters
      Parameters:
      - DomainWithoutDot
    - Label:
        default: CloudFront parameters
      Parameters:
      - AlternativeName
    - Label:
        default: S3 parameters
      Parameters:
      - S3DeletionPolicy
      - LogsRetentionInDays
    - Label:
        default: Nested templates
      Parameters:
      - IAMTemplate
      - R53Template
      - S3Template
      - ACMTemplate
      - PCATemplate
      - CFTemplate
Parameters:
  AlternativeName:
    Description: Specify hostname for CloudFront Alternate Domain Names (CNAMEs) field.
    Type: String
    Default: crl
  DomainWithoutDot:
    Description: Specify DNS domain for the CRL without trailing dot.
    Type: String
    Default: belodetek.io
  S3DeletionPolicy:
    Description: Specify S3 deletion policy.
    Default: Retain
    Type: String
    AllowedValues:
    - Delete
    - Retain
  LogsRetentionInDays:
    Description: Specify the number of days you want to retain log events.
    Type: Number
    Default: 7
    AllowedValues:
    - 1
    - 3
    - 5
    - 7
    - 14
    - 30
    - 60
    - 90
    - 120
    - 150
    - 180
    - 365
    - 400
    - 545
    - 731
    - 1827
    - 3653
  NotificationTopic:
    Description: Specify optional SNS topic for initial CloudFormation event notifications.
    Type: String
    Default: ''
  TimeoutInMinutes:
    Description: Specify optional timeout in minutes for stack creation.
    Type: Number
    Default: 60
  S3Template:
    Description: Nested template containing S3 resources.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  PCATemplate:
    Description: Nested template containing ACM-PCA resources.
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'
  R53Template:
    Description: Nested template containing R53 resources.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  ACMTemplate:
    Description: Nested template containing ACM resources.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  CFTemplate:
    Description: Nested template containing CloudFront resources.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  IAMTemplate:
    Description: Nested template containing IAM resources.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
Conditions:
  HasNotifySNS:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: NotificationTopic
  HasS3:
    Fn::Equals:
    - 'true'
    - Ref: S3Template
  HasIAM:
    Fn::Equals:
    - 'true'
    - Ref: IAMTemplate
  HasCF:
    Fn::And:
    - Fn::Equals:
      - 'true'
      - Ref: CFTemplate
    - Condition: HasS3
  HasACM:
    Fn::And:
    - Fn::Equals:
      - 'true'
      - Ref: ACMTemplate
    - Condition: HasR53
  HasR53:
    Fn::Equals:
    - 'true'
    - Ref: R53Template
  HasPCA:
    Fn::And:
    - Fn::Equals:
      - 'true'
      - Ref: PCATemplate
    - Condition: HasCF
    - Condition: HasIAM
Resources:
  LambdaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/0b4dd3f0-d8c4-11e9-a0de-0f102a395e3c/35cc623ced6fca369196ec344e9b9c4d.template
      Parameters:
        NameTag:
          Fn::Sub: ${AWS::StackName}
      NotificationARNs:
      - Fn::If:
        - HasNotifySNS
        - Ref: NotificationTopic
        - Ref: AWS::NoValue
      TimeoutInMinutes:
        Ref: TimeoutInMinutes
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
  SecretsProviderStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/0b4dd3f0-d8c4-11e9-a0de-0f102a395e3c/2ee13bc74e2f7b8ed09732679d2f5df8.template
      NotificationARNs:
      - Fn::If:
        - HasNotifySNS
        - Ref: NotificationTopic
        - Ref: AWS::NoValue
      TimeoutInMinutes:
        Fn::Sub: ${TimeoutInMinutes}
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
  IAMStack:
    Type: AWS::CloudFormation::Stack
    Condition: HasIAM
    DependsOn:
    - LambdaStack
    - SecretsProviderStack
    Properties:
      TemplateURL: https://s3.amazonaws.com/0b4dd3f0-d8c4-11e9-a0de-0f102a395e3c/efd2abe483cee8d68243c70cb6754721.template
      Parameters:
        NameTag:
          Fn::Sub: ${AWS::StackName}
      NotificationARNs:
      - Fn::If:
        - HasNotifySNS
        - Ref: NotificationTopic
        - Ref: AWS::NoValue
      TimeoutInMinutes:
        Fn::Sub: ${TimeoutInMinutes}
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
  S3Stack:
    Type: AWS::CloudFormation::Stack
    Condition: HasS3
    Properties:
      TemplateURL: https://s3.amazonaws.com/0b4dd3f0-d8c4-11e9-a0de-0f102a395e3c/3f4b3f580fcd3d97439f59535aa1d867.template
      Parameters:
        NameTag:
          Fn::Sub: ${AWS::StackName}
        LogsRetentionInDays:
          Fn::Sub: ${LogsRetentionInDays}
        S3DeletionPolicy:
          Fn::Sub: ${S3DeletionPolicy}
      NotificationARNs:
      - Fn::If:
        - HasNotifySNS
        - Ref: NotificationTopic
        - Ref: AWS::NoValue
      TimeoutInMinutes:
        Fn::Sub: ${TimeoutInMinutes}
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
  R53Stack:
    Type: AWS::CloudFormation::Stack
    Condition: HasR53
    DependsOn: LambdaStack
    Properties:
      TemplateURL: https://s3.amazonaws.com/0b4dd3f0-d8c4-11e9-a0de-0f102a395e3c/4f82e098e070d801db2ee7d7fccc4662.template
      Parameters:
        NameTag:
          Fn::Sub: ${AWS::StackName}
        HostedZone:
          Fn::Sub: ${DomainWithoutDot}
      NotificationARNs:
      - Fn::If:
        - HasNotifySNS
        - Ref: NotificationTopic
        - Ref: AWS::NoValue
      TimeoutInMinutes:
        Fn::Sub: ${TimeoutInMinutes}
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
  ACMStack:
    Type: AWS::CloudFormation::Stack
    Condition: HasACM
    DependsOn: LambdaStack
    Properties:
      TemplateURL: https://s3.amazonaws.com/0b4dd3f0-d8c4-11e9-a0de-0f102a395e3c/fffcc10abb3e2fc466c9f38eac4916f6.template
      Parameters:
        NameTag:
          Fn::Sub: ${AWS::StackName}
        DomainName:
          Fn::Sub: ${R53Stack.Outputs.PublicDNSName}
        ValidationDomain:
          Fn::Sub: ${DomainWithoutDot}
        LowerCaseDomainWithDot:
          Fn::Sub: ${R53Stack.Outputs.LowerCaseDomainWithDot}
        AlternativeName:
          Fn::Sub: ${AlternativeName}
      NotificationARNs:
      - Fn::If:
        - HasNotifySNS
        - Ref: NotificationTopic
        - Ref: AWS::NoValue
      TimeoutInMinutes:
        Fn::Sub: ${TimeoutInMinutes}
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
  CFStack:
    Type: AWS::CloudFormation::Stack
    Condition: HasCF
    Properties:
      TemplateURL: https://s3.amazonaws.com/0b4dd3f0-d8c4-11e9-a0de-0f102a395e3c/a30cab32ffb67d1babdb06134edd7dea.template
      Parameters:
        NameTag:
          Fn::Sub: ${AWS::StackName}
        LogsBucket:
          Fn::Sub: ${S3Stack.Outputs.LogsBucketDomainName}
        DomainName:
          Fn::Sub: ${S3Stack.Outputs.BucketDomainName}
        Bucket:
          Fn::Sub: ${S3Stack.Outputs.Bucket}
        ACMCertificateArn:
          Fn::If:
          - HasACM
          - Fn::Sub: ${ACMStack.Outputs.SSLCertificateArn}
          - Ref: AWS::NoValue
        CustomDomain:
          Fn::If:
          - HasACM
          - Fn::Sub: ${ACMStack.Outputs.CustomDomain}
          - Ref: AWS::NoValue
        HostedZone:
          Fn::If:
          - HasR53
          - Fn::Sub: ${R53Stack.Outputs.HostedZonePublic}
          - Ref: AWS::NoValue
        AlternativeName:
          Fn::Sub: ${AlternativeName}
        DomainWithoutDot:
          Fn::Sub: ${DomainWithoutDot}
      NotificationARNs:
      - Fn::If:
        - HasNotifySNS
        - Ref: NotificationTopic
        - Ref: AWS::NoValue
      TimeoutInMinutes:
        Fn::Sub: ${TimeoutInMinutes}
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
  PCAStack:
    Type: AWS::CloudFormation::Stack
    Condition: HasPCA
    DependsOn: IAMStack
    Properties:
      TemplateURL: https://s3.amazonaws.com/0b4dd3f0-d8c4-11e9-a0de-0f102a395e3c/90d21e918b4dd8f7537ed7e4256bb079.template
      Parameters:
        NameTag:
          Fn::Sub: ${AWS::StackName}
        Bucket:
          Fn::Sub: ${S3Stack.Outputs.Bucket}
        LogsRetentionInDays:
          Fn::Sub: ${LogsRetentionInDays}
        DomainWithoutDot:
          Fn::Sub: ${DomainWithoutDot}
        AlternativeName:
          Fn::Sub: ${AlternativeName}
      NotificationARNs:
      - Fn::If:
        - HasNotifySNS
        - Ref: NotificationTopic
        - Ref: AWS::NoValue
      TimeoutInMinutes:
        Fn::Sub: ${TimeoutInMinutes}
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}
Outputs:
  StackName:
    Value:
      Ref: AWS::StackName
    Export:
      Name:
        Fn::Sub: StackName-${AWS::StackName}
  S3Stack:
    Condition: HasS3
    Value:
      Fn::Sub: ${S3Stack.Outputs.S3StackName}
    Export:
      Name:
        Fn::Sub: S3StackName-${AWS::StackName}
  PCAStack:
    Condition: HasPCA
    Value:
      Fn::Sub: ${PCAStack.Outputs.PCAStackName}
    Export:
      Name:
        Fn::Sub: PCAStackName-${AWS::StackName}
  ACMStack:
    Condition: HasACM
    Value:
      Fn::Sub: ${ACMStack.Outputs.ACMStackName}
    Export:
      Name:
        Fn::Sub: ACMStackName-${AWS::StackName}
  CFStack:
    Condition: HasCF
    Value:
      Fn::Sub: ${CFStack.Outputs.CFStackName}
    Export:
      Name:
        Fn::Sub: CFStackName-${AWS::StackName}
  R53Stack:
    Condition: HasR53
    Value:
      Fn::Sub: ${R53Stack.Outputs.R53StackName}
    Export:
      Name:
        Fn::Sub: R53StackName-${AWS::StackName}
  IAMStack:
    Condition: HasIAM
    Value:
      Fn::Sub: ${IAMStack.Outputs.IAMStackName}
    Export:
      Name:
        Fn::Sub: IAMStackName-${AWS::StackName}
